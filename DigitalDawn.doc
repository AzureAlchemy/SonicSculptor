def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var10 = func4(arg1, arg2)
    var11 = func8()
    var14 = class9()
    for var15 in [var11 - (arg2 ^ arg1) for i in xrange(48)]:
        var14.func10(arg1, var15)
    var16 = var6 + var10 - (var10 & arg1)
    var17 = arg2 & arg2
    var18 = ((var17 ^ var16) - -712) - var17
    var19 = ((var10 + var10) ^ var16) & -283042515
    var20 = (2943458 - arg2 - var17) ^ var11
    var21 = (var16 - var19 & var17) + var16
    var22 = ((139 ^ var11) | var18) - var21
    var23 = ((arg1 - var17) + var21) + var18
    var24 = arg2 ^ var18 & var6
    var25 = 149 | var16 ^ arg2 | var23
    var26 = -1240435020 & (var10 - var11)
    var27 = var17 ^ (var6 & var24)
    var28 = var27 & var18
    result = var22 | (arg1 ^ var22)
    return result
class class9(object):
    def func10(self, arg12, arg13):
        return 0
def func8():
    func6()
    result = len(range(46))
    func7()
    return result
def func7():
    global len
    del len
def func6():
    global len
    len = lambda x : 9
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = rest ^ (0 ^ 9)
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func4(arg7, arg8):
    closure = [0]
    def func5(acc, rest):
        var9 = ((2 | (rest - 2) ^ 2) - acc) + rest ^ 1
        closure[0] += var9
        if acc == 0:
            return var9
        else:
            result = func5(acc - 1, var9)
            return result
    result = func5(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 29'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
